#This file is intend to detect faces
#Send txt message to a number when face is detected

import os
import numpy as np
import cv2
import pickle
from PIL import Image
import smtplib

face_cascade = cv2.CascadeClassifier('/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/opencv_contrib_python-4.2.0.32-py2.7-macosx-10.9-x86_64.egg/cv2/data/haarcascade_frontalface_alt2.xml') #To call the xml file that is used by cv2 to detect faces
#recognizer = cv2.face.LBPHFaceRecognizer_create()
#recognizer.read("Add the full path for the trainner.yml file")

#labels = {"person_name": 1} # Empty dictionary to store the labels/names
#with open('Add the full path for the lables.pickle file', "rb") as f:
#     og_labels = pickle.load(f)
#     labels = {v:k for k,v in og_labels.items()}
     


cap = cv2.VideoCapture(0) #To start capturing video

server = smtplib.SMTP("smtp.gmail.com", 587)
server.starttls()
server.login('tYOUR EMAIL', 'YOUR EMAIL PASSWORD HERE')

while (True):
     # Capture frame-by-frame
	 ret, frame = cap.read()  #To read the captured frame
	 gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
	 #detectMultiScale function is used to detect faces based on a specific scale
	 faces = face_cascade.detectMultiScale(gray, scaleFactor=1.5, minNeighbors=5)
	 for (x, y, w, h) in faces:
		 rol_gray =  gray[y:y+h, x:x+w]
		 rol_color = frame[y:y+h, x:x+w]
		 img_item = "my-image.png"
		 if x > 0 and y > 0 and w > 0 and h > 0:
		    server.sendmail('TracKey', '2485648599@txt.att.net', 'We are detecting Human face. It is Basheer... LOOOL- Join us at TRACKEYS')
		# Recognize, using deep learned model predict keras tensorflow pytorch scikit learn 
		 #id_, conf = recognizer.predict(rol_gray)
		 #if conf >= 45:
		  #  print(labels[id_])
		   # print(id_)
			#print(labels[id_])
		 cv2.imwrite(img_item, rol_gray) #To save the detected face
		 print(x, y, w, h)
		 
		 color = (255, 0, 0) #BGR 0 - 255, this is the rectangle border color
		 stroke = 2          #how thick is the rectangle border
		 end_cord_x = x + w  #This for how width is the rectangle based on the x cord of the frame
		 end_cord_y = y + h  #This for how height is the rectangle based on the y cord of the frame
		 cv2.rectangle(frame, (x, y), (end_cord_x, end_cord_y), color, stroke) 
		 
	 #Display the resulting frame
	 cv2.imshow('frame', frame)
	 #Press on q letter to exit the video capturing
	 if cv2.waitKey(20) & 0xFF == ord('q'):
	    break
		
cap.release()
cv2.destroyAllWindows()
